* []があるのは引数をとるコマンド

s []		デバッガの見ている場所を移動するコマンド。アドレスの実際の値や関数名で飛べる。
afl		関数の一覧を表示。

db []		ブレイクポイントをはるコマンド。アドレス値と関数名ではれる。
db- []		ブレイクポイントの削除
dc		ブレイクポイントに当たるまで実行
dp		カレントプロセスIDと子プロセスIDの一覧表示
dpa [pid]	プロセスにattach
ds		命令１つ分を実行
dm		メモリのマップを表示
dr []		レジスタを指定してその中身の値を表示
dr [reg] = []	レジスタを指定してその中に値を格納

f		シンボル情報の表示

ood		プログラムを最初からまた実行しなおす。ブレイクポイントは消えない。

pdf		現在いる関数のディスアセンブル結果を表示
pd		現在いる場所のディスアセンブル結果を数行表示
px [] @ []	前の引数にはサイズ、後ろの引数にはアドレス値やレジスタ(の中に格納されているアドレス)をとる。
		指定アドレスから指定サイズ分の格納されている値をメモリからダンプして出力
pxr [] @ []	pxの内容にさらに格納されている値の情報を付け加えたもの。

q		quitコマンド。radare2を終える際に押そう。基本的に別のウィンドウ開いた時もqを押せば戻れる。

VV		今いる関数のフローグラフの表示。qを二回押せば戻れる。
?		コマンドのヘルプ。コマンドの内容を確認したいときに使う。
		d?のように打てばdから始まるコマンドのヘルプを見ることができる。

? []		?コマンド単体に引数を取ることもできる。この場合引数の文字や数字の情報を見ることができる。
		例えば、? 0x200とすればそのバイナリが各型でどのような意味を取るかを表示できる。

* v! ヴィジュアルウィンドウに入るコマンド
	sキー		１命令ずつ実行
	tabキー		ウィンドウの切り替え
	Enterキー	選択しているウィンドウにフォーカス、またはフォーカスを外す。
	q		ヴィジュアルウィンドウから抜ける。
	Sキー		大文字のSだと１命令ずつ実行するが、関数の中には入る挙動は見せず、
			あたかも関数を一命令かのように実行する。

	マウスでアドレスをクリックするとそこをDisassemblyウィンドウが表示する。
	ripの指すところに戻りたい場合はRegistersウィンドウからripをクリックする。

* 子プロセスのデバッグ
	forkが実行されるアドレスにdbでbreakpointをはる
	そこまでdcで実行
	e dbg.forks=true
	dcで実行をするとforkで止まる
	dpaで子プロセスにアタッチする

* heap関連のコマンド
    dmh     mallocによって確保された領域の表示
    dmha    arenaに関する表示
